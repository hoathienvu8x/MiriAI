#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import os
import sqlite3

PUNCTUATION = "@`#$%&~|[]<>'(){}*+-=;,?.!:\"/"

def normalize_text(text):
    if '/B_W' in text or '/I_W' in text:
        tokens = text.strip().split(' ')
        text = ''
        for tok in tokens:
            word_tag = tok.split('/')
            tag = word_tag.pop()
            word = '/'.join(word_tag)
            if tag == 'I_W':
                text += '_'
            else:
                text += ' '
            text += word
    tags = ['Nc','Ny','Np','Nu','A','C','E','I','L','M','N','P','R','S','T','V','X','F']
    for t in tags:
        text = text.replace('/'+t+' ',' ')
    return text.strip()

def regx(text):
    ans = text.replace("…","...")
    ans = ans.replace("“","\"")
    ans = ans.replace("”","\"")
    ans = ans.replace("–","-")
    ans = ans.replace(""," ")
    for ch in PUNCTUATION:
        ans = ans.replace(ch,' ' + ch + ' ')
    return ans

def is_word(word):
    if word in PUNCTUATION:
        return False
    if word.isdigit():
        return False
    for ch in PUNCTUATION + '1234567890':
        if ch in word:
            return False
    return True

def tokenize(text):
    ans = regx(text)
    ans += " "
    ans = ans.replace("_", " ")
    return [ w.strip() for w in ans.split(' ') if w.strip() ]

def MiriTokenize(text):
    return text

def MiriTagger(text):
    taggers = [[],[]]
    for word in text.split(' '):
        taggers[0].append(word)
        taggers[1].append('N')
    return taggers

class MiriAI(Gtk.Window):
    def __init__(self):
        super(MiriAI, self).__init__()
        self.action = "seggment"
        self.kernel = "seggment"
        self.last_id = -1
        self.entry = None
        self.is_training = False
        self.init_ui()
        self.show_all()
        self.initialDB()

    def init_ui(self):
        self.set_border_width(15)
        self.set_title("Miri AI")
        self.set_size_request(500, 250)
        self.set_position(Gtk.WindowPosition.CENTER)
        if os.path.isfile(os.path.join(os.path.dirname(__file__),'favicon.png')):
            self.set_icon_from_file('favicon.png')
        self.set_resizable(False)
        self.connect('delete_event', self.quit)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        vbox.set_homogeneous(False)
        self.add(vbox)

        tbox = Gtk.Box(spacing=10)
        self.btnSegmention = Gtk.Button(label="Tách từ")
        self.btnSegmention.connect("clicked", self.on_button_toggled, "1")
        tbox.pack_start(self.btnSegmention, False, False, 0)

        self.btnTagger = Gtk.Button(label="Gán nhãn")
        self.btnTagger.connect("clicked", self.on_button_toggled, "2")
        tbox.pack_start(self.btnTagger, False, False, 0)

        label = Gtk.Label(label="Kiến thức máy")
        tbox.pack_start(label, False, False, 0)

        self.comboModels = Gtk.ComboBoxText()
        self.comboModels.set_entry_text_column(0)
        self.comboModels.connect("changed", self.on_model_changed)

        for md in ["Mặc định", "Bản mới"]:
            self.comboModels.append_text(md)
        self.comboModels.set_active(0)
        tbox.pack_start(self.comboModels, False, False, 0)

        self.btnHelp = Gtk.Button(label="Trợ giúp ?")
        self.btnHelp.connect('clicked', self.on_help_clicked)
        tbox.pack_end(self.btnHelp, False, False, 0)

        css_btn = Gtk.CssProvider()
        css_btn.load_from_data(b'.gtk_button { padding:5px 10px; font-family:arial,sans-serif; font-size:medium; border-radius: 0;background-image: none;background-color:white; } .gtk_actived { background-color:transparent; border:none; }')
        self.btnSegmention.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnTagger.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnHelp.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnSegmention.get_style_context().add_class('gtk_button')
        self.btnTagger.get_style_context().add_class('gtk_button')
        self.btnHelp.get_style_context().add_class('gtk_button')
        self.btnHelp.get_style_context().add_class('gtk_actived')
        
        vbox.pack_start(tbox,False, False, 0)

        self.on_button_toggled(self.btnSegmention, "1")

        scrolledWindow = Gtk.ScrolledWindow()
        scrolledWindow.set_hexpand(True)
        scrolledWindow.set_vexpand(True)
        scrolledWindow.set_size_request(-1, 150)
        vbox.pack_start(scrolledWindow,True, True, 1)

        self.textview = Gtk.TextView()
        self.textview.set_editable(True)
        self.textview.set_wrap_mode(Gtk.WrapMode.WORD)
        scrolledWindow.add(self.textview)

        provider = Gtk.CssProvider()
        provider.load_from_data(b'.gtk_textview { padding:10px; font-family:arial,sans-serif; font-size:medium;}')
        self.textview.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.textview.get_style_context().add_class('gtk_textview')

        provider = Gtk.CssProvider()
        provider.load_from_data(b'.gtk_label { padding:0; font-family:arial,sans-serif; font-size:medium; margin:0;}')

        self.lblState = Gtk.Label(label="..", xalign=0)
        self.lblState.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.lblState.get_style_context().add_class('gtk_label')
        
        vbox.pack_start(self.lblState, True, True, 0)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)

        self.btnAdd = Gtk.Button(label="Thêm dữ liệu")
        self.btnAdd.connect('clicked', self.on_add_clicked)
        hbox.pack_start(self.btnAdd, True, True, 0)

        self.btnPrev = Gtk.Button(label="Trước đó")
        self.btnPrev.connect('clicked', self.on_prev_clicked)
        self.btnPrev.set_sensitive(False)
        hbox.pack_start(self.btnPrev, True, True, 0)
        
        self.btnNext = Gtk.Button(label="Tiếp theo")
        self.btnNext.connect('clicked', self.on_next_clicked)
        self.btnNext.set_sensitive(True)
        hbox.pack_start(self.btnNext, True, True, 0)

        self.btnSave = Gtk.Button(label="Lưu dữ liệu")
        self.btnSave.connect('clicked', self.on_saved_clicked)
        self.btnSave.set_sensitive(True)
        hbox.pack_start(self.btnSave, True, True, 0)

        self.btnEval = Gtk.Button(label="Dự đoán")
        self.btnEval.connect('clicked', self.on_auto_clicked)
        self.btnEval.set_sensitive(True)
        hbox.pack_start(self.btnEval, True, True, 0)

        vbox.pack_start(hbox,False, False, 0)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)

        self.btnTrainTok = Gtk.Button(label="Huấn luyện tách từ")
        self.btnTrainTok.connect('clicked', self.on_traintok_clicked)
        self.btnTrainTok.set_sensitive(True)
        hbox.pack_start(self.btnTrainTok, True, True, 0)

        self.btnTrainTag = Gtk.Button(label="Huấn luyện gắn nhãn")
        self.btnTrainTag.connect('clicked', self.on_traintag_clicked)
        self.btnTrainTag.set_sensitive(True)
        hbox.pack_start(self.btnTrainTag, True, True, 0)

        vbox.pack_start(hbox,False, False, 0)

        separator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
        separator.set_margin_top(0)
        separator.set_margin_bottom(0)
        vbox.pack_start(separator, True, False, 0)

        self.lblstatus = Gtk.Label(label="", xalign=0)
        self.lblstatus.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.lblstatus.get_style_context().add_class('gtk_label')
        vbox.pack_end(self.lblstatus,True, True, 0)

    def on_model_changed(self, combo):
        tree_iter = combo.get_active_iter()
        if tree_iter is not None:
            model = combo.get_model()
            name, _ = model[tree_iter][:2]
            print("Selected: %s" % name)
        else:
            entry = combo.get_child()
            name = entry.get_text()
            print("Entered: %s" % name)
        if name.lower() == "mặc định":
            self.kernel = "%s-base.kernel" % self.action
        else:
            self.kernel = "%s.kernel" % self.action

        print('Kernel: %s' % self.kernel)

    def on_traintok_clicked(self, button):
        if self.is_training == False:
            # self.btnTrainTag.set_label('Huấn luyện gắn nhãn')
            self.btnTrainTag.set_sensitive(False)
            button.set_label("Dừng huấn luyện")
            self.is_training = True
        else:
            self.is_training = False
            self.btnTrainTag.set_sensitive(True)
            button.set_label('Huấn luyện tách từ')

    def on_traintag_clicked(self, button):
        if self.is_training == False:
            # self.btnTrainTok.set_label('Huấn luyện tách từ')
            self.btnTrainTok.set_sensitive(False)
            button.set_label("Dừng huấn luyện")
            self.is_training = True
        else:
            self.is_training = False
            self.btnTrainTok.set_sensitive(True)
            button.set_label("Huấn luyện gắn nhãn")

    def on_button_toggled(self, button, name):
        if name == "1":
            self.btnSegmention.get_style_context().remove_class('gtk_actived')
            self.btnTagger.get_style_context().add_class('gtk_actived')
            self.action = "seggment"
        else:
            self.btnTagger.get_style_context().remove_class('gtk_actived')
            self.btnSegmention.get_style_context().add_class('gtk_actived')
            self.action = "tagger"
        if self.entry:
            if self.action == "seggment":
                tokens = (self.entry['tokens'] if self.entry['tokens'] else self.entry['sentence']).split(' ')
                for i, tok in enumerate(tokens):
                    if '_' in tok:
                        tokens[i] = '<b><span color="blue">'+tok+'</span></b>'
            else:
                tokens = (self.entry['tagged'] if self.entry['tagged'] else self.entry['sentence']).split(' ')
                for i, tok in enumerate(tokens):
                    word_tag = tok.split('/')
                    tag = word_tag.pop()
                    word = '/'.join(word_tag)
                    tokens[i] = word+'<b><span color="blue">/'+tag+'</span></b>'
            text_buffer = Gtk.TextBuffer()
            self.textview.set_buffer(text_buffer)
            text_buffer.insert_markup(text_buffer.get_start_iter(),' '.join(tokens), -1)

    def on_auto_clicked(self, button):
        textbuffer = self.textview.get_buffer()
        text = textbuffer.get_text(textbuffer.get_start_iter(),textbuffer.get_end_iter(),True).strip()
        if text:
            text = text.replace('”','"')
            text = text.replace('“','"')
            text = normalize_text(text+' ')
            if self.action == "seggment":
                tokens = MiriTokenize(text).split(' ')
                for i, tok in enumerate(tokens):
                    if '_' in tok:
                        tok = '<b><span color="blue">'+tok+'</span></b>'
                        tokens[i] = tok
                text = ' '.join(tokens)
            else:
                result = MiriTagger(MiriTokenize(text))
                text = ''
                for i in range(len(result[0])):
                    text += ' ' + result[0][i]+'<b><span color="blue">/'+result[1][i]+'</span></b>'
                text = text.strip()
            text_buffer = Gtk.TextBuffer()
            self.textview.set_buffer(text_buffer)
            text_buffer.insert_markup(text_buffer.get_start_iter(),text, -1)
        else:
            self.lblState.set_markup('<span color="brown">Không có dữ liệu</span>')

    def on_saved_clicked(self, button):
        if self.last_id <= 0:
            self.lblState.set_markup('<span color="brown">Không có thông tin để cập nhật</span>')
            return
        textbuffer = self.textview.get_buffer()
        text = textbuffer.get_text(textbuffer.get_start_iter(),textbuffer.get_end_iter(),True).strip()
        if text:
            text = text.replace('”','"')
            text = text.replace('“','"')
            try:
                cur = self.db.cursor()
                item = cur.execute("SELECT id FROM sentences WHERE id = ? ", [ self.last_id ]).fetchone()
                if not item:
                    self.lblState.set_markup('<span color="brown">Không có thông tin để cập nhật</span>')
                    cur.close()
                    return
                act = "gắn nhãn"
                if self.action == "seggment":
                    act = "tách từ"
                    cur.execute("UPDATE sentences SET tokens = ? WHERE id = ?", [ text, self.last_id ])
                else:
                    cur.execute("UPDATE sentences SET tagged = ? WHERE id = ?", [ text, self.last_id ])
                self.db.commit()
                if self.db.total_changes >= 0:
                    self.lblState.set_markup('<span color="green">Đã cập nhật %s cho #%d</span>' % ( act, self.last_id))
                else:
                    self.lblState.set_markup('<span color="brown">Lỗi cập nhật %s cho #%d</span>' % ( act, self.last_id))
                cur.close()
            except Exception as ex:
                act = "tách từ" if self.action == "seggment" else "gắn nhãn" 
                self.lblState.set_markup('<span color="brown">Lỗi cập nhật %s: %s</span>' % (act, str(ex)))
        else:
            self.lblState.set_markup('<span color="brown">Không có dữ liệu</span>')

    def on_help_clicked(self, button):
        dialog = Gtk.MessageDialog(transient_for=self,flags=0,message_type=Gtk.MessageType.INFO,buttons=Gtk.ButtonsType.OK,text="Nhãn từ loại")
        dialog.format_secondary_text("""/A Tính từ   \t/C Liên từ   \t/E Giới từ
/I Thán từ   \t/L Định từ   \t/M Số từ
/N Danh từ   \t/Nc Phân loại   \t/Ny Viết tắt
/Np Tên riêng   \t/Nu Đơn vị   \t/P Đại từ
/R Phó từ      \t/S Yếu tố      \t/T Trợ từ
/V Động từ      \t/X Từ loại      \t/F Ký tự""")
        dialog.run()
        dialog.destroy()

    def on_add_clicked(self, button):
        textbuffer = self.textview.get_buffer()
        text = textbuffer.get_text(textbuffer.get_start_iter(),textbuffer.get_end_iter(),True).strip()
        if text:
            text = text.replace('”','"')
            text = text.replace('“','"')
            text = normalize_text(text+' ').replace('_',' ').strip()
            tokens = tokenize(text.lower())
            tokens = [ tok for tok in tokens if is_word( tok ) ]
            try:
                cur = self.db.cursor()
                item = cur.execute("SELECT id FROM sentences WHERE sentence = ?", [ text ]).fetchone()
                if item:
                    self.lblState.set_markup('<span color="brown">Đã lưu #%d</span>' % item[0])
                    self.last_id = item[0]
                    cur.close()
                    return
                cur.execute("INSERT INTO sentences (sentence, cleaned) VALUES (?, ?)", [ text, ' '.join(tokens)])
                self.db.commit()
                if self.db.total_changes > 0:
                    self.last_id = cur.lastrowid
                    self.lblState.set_markup('<span color="green">Đã lưu #%d</span>' % self.last_id)
                    cur.close()
                else:
                    cur.close()
                    self.lblState.set_markup('<span color="red">Lỗi lưu dữ liệu</span>')
            except Exception as ex:
                self.lblState.set_markup('<span color="red">Lỗi %s</span>' % str(ex))
        else:
            self.lblState.set_markup('<span color="brown">Không có dữ liệu</span>')

    def on_next_clicked(self, button):
        try:
            cur = self.db.cursor()
            item = cur.execute("SELECT id, sentence, cleaned, tokens, tagged FROM sentences WHERE id > ? ORDER BY id ASC LIMIT 1" , [ self.last_id ]).fetchone()
            if not item:
                cur.close()
                self.lblState.set_markup('<span color="brown">Không có dữ liệu</span>')
                return
            self.last_id = item[0]
            self.entry = {
                'sentence': item[1],
                'cleaned': item[2],
                'tokens': item[3],
                'tagged': item[4]
            }
            if self.action == "seggment":
                tokens = (self.entry['tokens'] if self.entry['tokens'] else self.entry['sentence']).split(' ')
                for i, tok in enumerate(tokens):
                    if '_' in tok:
                        tokens[i] = '<b><span color="blue">'+tok+'</span></b>'
            else:
                tokens = (self.entry['tagged'] if self.entry['tagged'] else self.entry['sentence']).split(' ')
                for i, tok in enumerate(tokens):
                    word_tag = tok.split('/')
                    tag = word_tag.pop()
                    word = '/'.join(word_tag)
                    tokens[i] = word+'<b><span color="blue">/'+tag+'</span></b>'
            text_buffer = Gtk.TextBuffer()
            self.textview.set_buffer(text_buffer)
            text_buffer.insert_markup(text_buffer.get_start_iter(),' '.join(tokens), -1)
            item = cur.execute("SELECT id FROM sentences WHERE id < ? ORDER BY id DESC LIMIT 1" , [ self.last_id ]).fetchone()
            if item:
                self.btnPrev.set_sensitive(True)
            else:
                self.btnPrev.set_sensitive(False)
            item = cur.execute("SELECT id FROM sentences WHERE id > ? ORDER BY id DESC LIMIT 1" , [ self.last_id ]).fetchone()
            if item:
                self.btnNext.set_sensitive(True)
            else:
                self.btnNext.set_sensitive(False)
            cur.close()
        except Exception as ex:
            self.lblState.set_markup('<span color="brown">Lỗi tải dữ liệu: %s</span>' % str(ex))

    def on_prev_clicked(self, button):
        try:
            cur = self.db.cursor()
            item = cur.execute("SELECT id, sentence, cleaned, tokens, tagged FROM sentences WHERE id < ? ORDER BY id DESC LIMIT 1" , [ self.last_id ]).fetchone()
            if not item:
                cur.close()
                self.btnPrev.set_sensitive(False)
                self.lblState.set_markup('<span color="brown">Không có dữ liệu</span>')
                return
            self.last_id = item[0]
            self.entry = {
                'sentence': item[1],
                'cleaned': item[2],
                'tokens': item[3],
                'tagged': item[4]
            }
            if self.action == "seggment":
                tokens = (self.entry['tokens'] if self.entry['tokens'] else self.entry['sentence']).split(' ')
                for i, tok in enumerate(tokens):
                    if '_' in tok:
                        tokens[i] = '<b><span color="blue">'+tok+'</span></b>'
            else:
                tokens = (self.entry['tagged'] if self.entry['tagged'] else self.entry['sentence']).split(' ')
                for i, tok in enumerate(tokens):
                    word_tag = tok.split('/')
                    tag = word_tag.pop()
                    word = '/'.join(word_tag)
                    tokens[i] = word+'<b><span color="blue">/'+tag+'</span></b>'
            text_buffer = Gtk.TextBuffer()
            self.textview.set_buffer(text_buffer)
            text_buffer.insert_markup(text_buffer.get_start_iter(),' '.join(tokens), -1)
            item = cur.execute("SELECT id FROM sentences WHERE id < ? ORDER BY id DESC LIMIT 1" , [ self.last_id ]).fetchone()
            if item:
                self.btnPrev.set_sensitive(True)
            else:
                self.btnPrev.set_sensitive(False)
            item = cur.execute("SELECT id FROM sentences WHERE id > ? ORDER BY id DESC LIMIT 1" , [ self.last_id ]).fetchone()
            if item:
                self.btnNext.set_sensitive(True)
            else:
                self.btnNext.set_sensitive(False)
            cur.close()
        except Exception as ex:
            self.lblState.set_markup('<span color="brown">Lỗi tải dữ liệu: %s</span>' % str(ex))

    def initialDB(self):
        try:
            self.db = sqlite3.connect(os.path.join(os.path.dirname(__file__),'miriai.db'), check_same_thread=False)
            self.db.execute("CREATE TABLE IF NOT EXISTS sentences (id INTEGER PRIMARY KEY, sentence TEXT, cleaned TEXT, tokens TEXT, tagged TEXT)")
            if self.db.total_changes >= 0:
                self.lblstatus.set_markup("<span color=\"green\">Đã kết nối tới cơ sở dữ liệu `miriai.db`</span>")
            else:
                self.lblstatus.set_markup("<span color=\"red\">Cơ sở dữ liệu `miriai.db` chưa được kết nối</span>")
        except Exception as ex:
            self.info_dialog("Lỗi kết nối tới CSDL", str(ex))

    def quit(self, sender, event):
        Gtk.main_quit()

    def info_dialog(self, text, secondary_text):
        dialogWindow = Gtk.MessageDialog(parent=self, modal=True, destroy_with_parent=True, message_type=Gtk.MessageType.INFO, buttons=Gtk.ButtonsType.OK, text=text)
        dialogWindow.format_secondary_text(secondary_text)
        dialogWindow.run()
        dialogWindow.destroy()

if __name__ == "__main__":
    app = MiriAI()
    Gtk.main()
